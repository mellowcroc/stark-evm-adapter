//! In order to align with the JSON generated by the stone prover,
//! we have to (de)serialize U256 as a JSON number (instead of a string).

use ethers::types::U256;
use serde::{ser::SerializeSeq, Deserialize, Deserializer, Serialize, Serializer};
use serde_json::Value;

pub fn serialize_u256_as_number<S>(value: &U256, serializer: S) -> Result<S::Ok, S::Error>
where
    S: Serializer,
{
    let value_str = value.to_string();
    let json_value = Value::Number(value_str.parse::<serde_json::Number>().unwrap());

    json_value.serialize(serializer)
}

pub fn deserialize_u256_as_number<'de, D>(deserializer: D) -> Result<U256, D::Error>
where
    D: Deserializer<'de>,
{
    let json_value = Value::deserialize(deserializer)?;
    let res = if let Value::Number(number) = json_value {
        U256::from_dec_str(number.as_str()).unwrap()
    } else {
        return Err(serde::de::Error::custom(
            "Expected a number when deserializing U256 as JSON",
        ));
    };

    Ok(res)
}

pub fn serialize_vec_u256_as_number<S>(vec: &[U256], serializer: S) -> Result<S::Ok, S::Error>
where
    S: Serializer,
{
    let mut seq = serializer.serialize_seq(Some(vec.len()))?;
    for element in vec {
        // Use the previously defined serialize_u256_as_number for each element
        seq.serialize_element(&SerializeU256AsNumber(*element))?;
    }
    seq.end()
}

pub fn deserialize_vec_u256_as_number<'de, D>(deserializer: D) -> Result<Vec<U256>, D::Error>
where
    D: Deserializer<'de>,
{
    let json_value = Value::deserialize(deserializer)?;
    let vec = json_value
        .as_array()
        .unwrap()
        .iter()
        .map(|v| SerializeU256AsNumber::deserialize(v).unwrap().0)
        .collect::<Vec<U256>>();

    Ok(vec)
}

// Wrapper type to use the serialize_u256_as_number function
pub struct SerializeU256AsNumber(U256);

impl Serialize for SerializeU256AsNumber {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        serialize_u256_as_number(&self.0, serializer)
    }
}

impl<'de> Deserialize<'de> for SerializeU256AsNumber {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let res = deserialize_u256_as_number(deserializer)?;
        Ok(Self(res))
    }
}
