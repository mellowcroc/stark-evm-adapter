var searchIndex = new Map(JSON.parse('[\
["stark_evm_adapter",{"doc":"STARK-EVM adapter","t":"ICCOHCCOCCOFFFFFFFOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNOONNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOONNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNFNNNNNNNONNNOONHNNNNPPPPGPPPNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNOONCONNOOOONOOOOONNNNNNJFFNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNOONNNNNNNNNNNNNNNONNNNNNNNNNNNNNFNNNNNNNNNNNCNNNNNNNJFFNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNOONNONNNNNNNNNNNNNNFNNNNNNNNNCNOONNOOONNNNNNJFFNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNONNNNNNNNNNNN","n":["ContractFunctionCall","annotated_proof","annotation_parser","block","default_prime","errors","fri_merkle_statement","function","merkle_statement","oods_statement","tx","AnnotatedProof","FriParameters","MemorySegment","ProofParameters","PublicInput","PublicMemory","StarkParameters","address","annotations","begin_addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","extra_annotations","extract_interaction_elements","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fri","fri_step_list","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","last_layer_degree_bound","layout","log_n_cosets","memory_segments","n_queries","n_steps","page","proof_hex","proof_of_work_bits","proof_parameters","public_input","public_memory","rc_max","rc_min","serialize","serialize","serialize","serialize","serialize","serialize","serialize","stark","stop_ptr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_extension_field","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","SplitProofs","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fri_merkle_statements","from","init","into","main_proof","merkle_statements","serialize","split_fri_merkle_statements","try_from","try_into","type_id","vzip","EtherEncodingError","HexExtractionError","InvalidLineFormat","ParseBigUIntError","ParseError","ParseIntError","ParseU256Error","RegexError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","init","into","to_string","try_from","try_into","type_id","vzip","FRIMerkleStatement","borrow","borrow_mut","contract_function_call","deref","deref_mut","deserialize","drop","evaluation_point","expected_root","fmt","fri_statement_contract","fri_step_size","from","init","input_interleaved","input_layer_inverses","input_layer_queries","input_layer_values","into","output_interleaved","output_layer_inverses","output_layer_queries","output_layer_values","proof","serialize","try_from","try_into","type_id","verify","vzip","FRISTATEMENTCONTRACT_ABI","FriStatementContract","VerifyFRICall","abi_signature","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","evaluation_point","expected_root","fmt","fmt","fmt","fri_queue","fri_step_size","from","from","from","from_token","from_tokens","function_name","hash","init","init","into","into","into_token","into_tokens","new","param_type","proof","selector","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify_fri","vzip","vzip","MerkleStatement","borrow","borrow_mut","contract_function_call","deref","deref_mut","deserialize","drop","fmt","from","init","into","merkle_statement_contract","new","serialize","try_from","try_into","type_id","verify","vzip","MERKLESTATEMENTCONTRACT_ABI","MerkleStatementContract","VerifyMerkleCall","abi_signature","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","expected_root","fmt","fmt","fmt","from","from","from","from_token","from_tokens","function_name","hash","init","init","into","into","into_token","into_tokens","merkle_height","merkle_queue","new","param_type","proof","selector","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify_merkle","vzip","vzip","MainProof","borrow","borrow_mut","contract_function_call","deref","deref_mut","deserialize","drop","fmt","from","gps_statement_verifier_contract","init","interaction_alpha","interaction_z","into","new","proof","proof_parameters","public_input","serialize","try_from","try_into","type_id","verify","vzip","GPSSTATEMENTVERIFIERCONTRACT_ABI","GpsStatementVerifierContract","VerifyProofAndRegisterCall","abi_signature","borrow","borrow","borrow_mut","borrow_mut","cairo_aux_input","cairo_verifier_id","clone","clone","clone_into","clone_into","decode","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_token","from_tokens","function_name","hash","init","init","into","into","into_token","into_tokens","new","param_type","proof","proof_params","selector","serialize","task_metadata","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify_proof_and_register","vzip","vzip"],"q":[[0,"stark_evm_adapter"],[11,"stark_evm_adapter::annotated_proof"],[170,"stark_evm_adapter::annotation_parser"],[190,"stark_evm_adapter::errors"],[220,"stark_evm_adapter::fri_merkle_statement"],[251,"stark_evm_adapter::fri_merkle_statement::fri_statement_contract"],[317,"stark_evm_adapter::merkle_statement"],[337,"stark_evm_adapter::merkle_statement::merkle_statement_contract"],[402,"stark_evm_adapter::oods_statement"],[427,"stark_evm_adapter::oods_statement::gps_statement_verifier_contract"],[493,"primitive_types"],[494,"core::result"],[495,"serde::de"],[496,"core::fmt"],[497,"core::fmt"],[498,"core::any"],[499,"hex::error"],[500,"uint::uint"],[501,"regex::error"],[502,"core::num::error"],[503,"uint::uint"],[504,"num_bigint"],[505,"alloc::string"],[506,"ethabi"],[507,"ethers_providers::rpc::transports::http"],[508,"ethers_providers::rpc::provider"],[509,"k256::ecdsa"],[510,"ethers_signers::wallet"],[511,"ethers_middleware::signer"],[512,"alloc::sync"],[513,"alloc::borrow"],[514,"ethers_core::abi::error"],[515,"core::convert"],[516,"alloc::vec"],[517,"ethers_contract::_contract"],[518,"ethers_providers::middleware"],[519,"ethabi::token::token"],[520,"ethers_core::abi::tokens"],[521,"core::hash"],[522,"ethereum_types"],[523,"core::convert"],[524,"ethers_core::types"],[525,"ethers_contract::call"]],"d":["A type alias for ethers contract function call.","","","Optional block number to be used when calculating the …","Default prime field for cairo. This prime will be used …","","","The ABI of the function being called","","","The raw transaction object","AnnotatedProof maps annotated proof json file which …","","Memory segments for cairo builtins","","Public input for a cairo execution","Public memory for a cairo execution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SplitProofs maps the split proof json file which contains …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","This is the main function to use to split an AnnotatedProof…","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Decommitment for a FRI layer merkle statement","","","Constructs <code>verifyFRI</code> contract function call","","","","","","","","This module was auto-generated with ethers-rs Abigen. More …","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Initiates <code>verifyFRI</code> contract function call","","The parsed human-readable ABI of the contract.","","Container type for all input parameters for the <code>verifyFRI</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new contract instance with the specified <code>ethers</code> …","","","","","","","","","","","","","","Calls the contract’s <code>verifyFRI</code> (0xe85a6a28) function","","","Decommitment for a merkle statement","","","Constructs <code>verifyMerkle</code> contract function call.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This module was auto-generated with ethers-rs Abigen. More …","","","","","","Initiates <code>verifyMerkle</code> contract call.","","The parsed human-readable ABI of the contract.","","Container type for all input parameters for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a new contract instance with the specified <code>ethers</code> …","","","","","","","","","","","","","","Calls the contract’s <code>verifyMerkle</code> (0x3fe317a6) function","","","Proof for consistency check for out of domain sampling","","","Construct <code>verifyProofAndRegister</code> contract call","","","","","","Returns the argument unchanged.","This module was auto-generated with ethers-rs Abigen. More …","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Initiate <code>verifyProofAndRegister</code> contract call","","The parsed human-readable ABI of the contract.","","Container type for all input parameters for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new contract instance with the specified <code>ethers</code> …","","","","","","","","","","","","","","","","Calls the contract’s <code>verifyProofAndRegister</code> (0x9b3b76cc) …","",""],"i":[0,0,0,37,0,0,0,37,0,0,37,0,0,0,0,0,0,0,8,2,7,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,2,3,2,3,4,5,6,7,8,4,5,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,5,6,4,6,5,6,8,2,5,2,2,6,6,6,2,3,4,5,6,7,8,3,7,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,3,8,2,3,4,5,6,7,8,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18,18,18,18,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,28,28,28,28,28,28,28,28,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,29,40,29,40,29,40,29,40,29,29,29,40,40,29,40,40,29,29,40,29,29,29,29,29,29,29,29,29,40,29,29,29,29,40,40,29,29,29,29,29,40,29,40,29,29,29,40,29,29,29,29,40,29,29,40,29,40,29,40,29,40,40,29,0,57,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,57,57,0,0,0,58,59,58,59,58,59,58,59,58,58,58,59,59,58,59,59,58,58,59,58,58,58,58,58,58,58,58,59,58,58,59,59,58,58,58,58,58,59,58,59,58,58,58,58,58,59,58,58,58,58,59,58,58,59,58,59,58,59,58,59,59,58,0,60,60,60,60,60,60,60,60,60,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,0,61,62,61,62,61,61,61,62,61,62,61,61,61,62,62,61,62,62,61,61,62,61,61,61,61,61,61,61,62,61,61,62,62,61,61,61,61,61,62,61,62,61,61,61,62,61,61,61,61,61,61,62,61,61,62,61,62,61,62,61,62,62,61],"f":"````{{}b}````````````````{ce{}{}}0000000000000{dd}{ff}{hh}{jj}{ll}{nn}{A`A`}{{ce}Ab{}{}}000000{Adc{}}0000000000000{c{{Af{d}}}Ah}{c{{Af{f}}}Ah}{c{{Af{h}}}Ah}{c{{Af{j}}}Ah}{c{{Af{l}}}Ah}{c{{Af{n}}}Ah}{c{{Af{A`}}}Ah}{AdAb}000000`{d{{Aj{bb}}}}`{{dAl}An}{{fAl}An}{{hAl}An}{{jAl}An}{{lAl}An}{{nAl}An}{{A`Al}An}``{cc{}}000000{{}Ad}000000{ce{}{}}000000``````````````{{dc}AfB`}{{fc}AfB`}{{hc}AfB`}{{jc}AfB`}{{lc}AfB`}{{nc}AfB`}{{A`c}AfB`}``7777777{c{{Af{e}}}{}{}}0000000000000{cBb{}}000000``9999999`99{Adc{}}0{c{{Af{Bd}}}Ah}{AdAb}{{BdAl}An}`?>=``{{Bdc}AfB`}{d{{Af{BdBf}}}}776?````````??553{{BfAl}An}0{cc{}}{BhBf}{BjBf}{BlBf}{BnBf}{C`Bf}{CbBf}{CdBf}{{}Ad}{ce{}{}}{cCf{}}{c{{Af{e}}}{}{}}0{cBb{}}3`33{ChCj}{Adc{}}0{c{{Af{Ch}}}Ah}{AdAb}``{{ChAl}An}``{cc{}}:````9`````{{Chc}AfB`}887{{ChCl{Dh{{Df{{D`{Cn}}{Dd{Db}}}}}}}Dj};```{{}{{Dn{Dl}}}}<<<<{{{E`{c}}}{{E`{c}}}{}}{CjCj}{{ce}Ab{}{}}0{c{{Af{CjEb}}}{{Eh{{Ef{Ed}}}}}}{{}Cj}{{{E`{c}}}e{}{}}==0=={c{{Af{Cj}}}Ah}<<{Cj{{Ej{Ed}}}}{{CjCj}El}{{ce}El{}{}}000``{{{E`{c}}Al}An{}}{{CjAl}An}0``?{{{En{c}}}{{E`{c}}}F`}{cc{}}{Fb{{Af{CjFd}}}}{{{Ej{Fb}}}{{Af{cFd}}}{}}{{}{{Dn{Dl}}}}{{Cjc}AbFf}{{}Ad}0{ce{}{}}0{CjFb}{c{{Ej{Fb}}}{}}{{c{Dh{e}}}{{E`{e}}}{{Fj{Fh}}}F`}{{}Fl}`{{}Fn}{{Cjc}AfB`}66{cCf{}}{c{{Af{e}}}{}{}}000{cBb{}}0{{{E`{c}}{Ej{b}}{Ej{b}}bbb}{{G`{cAb}}}F`}::`::{GbGd}{Adc{}}0{c{{Af{Gb}}}Ah}{AdAb}{{GbAl}An}{cc{}}{{}Ad}{ce{}{}}`{{bAdAd{Ej{b}}{Ej{b}}{Ej{b}}}Gb}{{Gbc}AfB`}<<;{{GbFh{Dh{{Df{{D`{Cn}}{Dd{Db}}}}}}}Dj}3```{{}{{Dn{Dl}}}}4444{{{Gf{c}}}{{Gf{c}}}{}}{GdGd}{{ce}Ab{}{}}0{c{{Af{GdEb}}}{{Eh{{Ef{Ed}}}}}}{{}Gd}{{{Gf{c}}}e{}{}}{Adc{}}0010{c{{Af{Gd}}}Ah}{AdAb}0{Gd{{Ej{Ed}}}}{{GdGd}El}{{ce}El{}{}}000`{{{Gf{c}}Al}An{}}{{GdAl}An}0{{{En{c}}}{{Gf{c}}}F`}{cc{}}0{Fb{{Af{GdFd}}}}{{{Ej{Fb}}}{{Af{cFd}}}{}}{{}{{Dn{Dl}}}}{{Gdc}AbFf}{{}Ad}0{ce{}{}}0{GdFb}{c{{Ej{Fb}}}{}}``{{c{Dh{e}}}{{Gf{e}}}{{Fj{Fh}}}F`}{{}Fl}`{{}Fn}{{Gdc}AfB`}66{cCf{}}{c{{Af{e}}}{}{}}000{cBb{}}0{{{Gf{c}}{Ej{b}}{Ej{b}}bb}{{G`{cAb}}}F`}::`::{{Gh{Ej{b}}}Gj}{Adc{}}0{c{{Af{Gh}}}Ah}{AdAb}{{GhAl}An}{cc{}}`{{}Ad}``{ce{}{}}{{{Ej{b}}flbb}Gh}```{{Ghc}AfB`}<<;{{GhFh{Dh{{Df{{D`{Cn}}{Dd{Db}}}}}}{Ej{b}}}Dj}3```{{}{{Dn{Dl}}}}4444``{{{Gl{c}}}{{Gl{c}}}{}}{GjGj}{{ce}Ab{}{}}0{c{{Af{GjEb}}}{{Eh{{Ef{Ed}}}}}}{{}Gj}{{{Gl{c}}}e{}{}}{Adc{}}0010{c{{Af{Gj}}}Ah}{AdAb}0{Gj{{Ej{Ed}}}}{{GjGj}El}{{ce}El{}{}}000{{{Gl{c}}Al}An{}}{{GjAl}An}0{{{En{c}}}{{Gl{c}}}F`}{cc{}}0{Fb{{Af{GjFd}}}}{{{Ej{Fb}}}{{Af{cFd}}}{}}{{}{{Dn{Dl}}}}{{Gjc}AbFf}{{}Ad}0{ce{}{}}0{GjFb}{c{{Ej{Fb}}}{}}{{c{Dh{e}}}{{Gl{e}}}{{Fj{Fh}}}F`}{{}Fl}``{{}Fn}{{Gjc}AfB`}`66{cCf{}}{c{{Af{e}}}{}{}}000{cBb{}}0{{{Gl{c}}{Ej{b}}{Ej{b}}{Ej{b}}{Ej{b}}b}{{G`{cAb}}}F`}::","c":[],"p":[[5,"U256",493],[5,"AnnotatedProof",11],[5,"ProofParameters",11],[5,"StarkParameters",11],[5,"FriParameters",11],[5,"PublicInput",11],[5,"MemorySegment",11],[5,"PublicMemory",11],[1,"unit"],[1,"usize"],[6,"Result",494],[10,"Deserializer",495],[1,"tuple"],[5,"Formatter",496],[8,"Result",496],[10,"Serializer",497],[5,"TypeId",498],[5,"SplitProofs",170],[6,"ParseError",190],[6,"FromHexError",499],[6,"FromDecStrErr",500],[6,"Error",501],[5,"ParseIntError",502],[5,"FromStrRadixErr",500],[6,"EncodePackedError",503],[5,"ParseBigIntError",504],[5,"String",505],[5,"FRIMerkleStatement",220],[5,"VerifyFRICall",251],[8,"Address",506],[5,"Provider",507],[5,"Provider",508],[8,"SigningKey",509],[5,"Wallet",510],[5,"SignerMiddleware",511],[5,"Arc",512],[8,"ContractFunctionCall",0],[1,"str"],[6,"Cow",513],[5,"FriStatementContract",251],[6,"AbiError",514],[1,"u8"],[1,"slice"],[10,"AsRef",515],[5,"Vec",516],[1,"bool"],[8,"Contract",517],[10,"Middleware",518],[6,"Token",519],[5,"InvalidOutputType",520],[10,"Hasher",521],[8,"Address",522],[10,"Into",515],[6,"ParamType",523],[8,"Selector",524],[8,"ContractCall",525],[5,"MerkleStatement",317],[5,"VerifyMerkleCall",337],[5,"MerkleStatementContract",337],[5,"MainProof",402],[5,"VerifyProofAndRegisterCall",427],[5,"GpsStatementVerifierContract",427]],"b":[[203,"impl-Display-for-ParseError"],[204,"impl-Debug-for-ParseError"],[206,"impl-From%3CFromHexError%3E-for-ParseError"],[207,"impl-From%3CFromDecStrErr%3E-for-ParseError"],[208,"impl-From%3CError%3E-for-ParseError"],[209,"impl-From%3CParseIntError%3E-for-ParseError"],[210,"impl-From%3CFromStrRadixErr%3E-for-ParseError"],[211,"impl-From%3CEncodePackedError%3E-for-ParseError"],[212,"impl-From%3CParseBigIntError%3E-for-ParseError"],[283,"impl-Display-for-VerifyFRICall"],[284,"impl-Debug-for-VerifyFRICall"],[368,"impl-Debug-for-VerifyMerkleCall"],[369,"impl-Display-for-VerifyMerkleCall"],[459,"impl-Debug-for-VerifyProofAndRegisterCall"],[460,"impl-Display-for-VerifyProofAndRegisterCall"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
